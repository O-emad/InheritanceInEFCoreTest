// <auto-generated />
using System;
using InheritanceInEFCoreTest.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InheritanceInEFCoreTest.Data.Migrations
{
    [DbContext(typeof(WorkFlowContext))]
    [Migration("20221020142515_addingAccounts_2")]
    partial class addingAccounts_2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("InheritanceInEFCoreTest.Domain.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("InheritanceInEFCoreTest.Domain.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("FromAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Number")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid?>("ToAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FromAccountId");

                    b.HasIndex("ToAccountId");

                    b.ToTable("Transaction", (string)null);
                });

            modelBuilder.Entity("InheritanceInEFCoreTest.Domain.Expenses", b =>
                {
                    b.HasBaseType("InheritanceInEFCoreTest.Domain.Transaction");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Supplier")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.ToTable("Expenses", (string)null);
                });

            modelBuilder.Entity("InheritanceInEFCoreTest.Domain.Invoice", b =>
                {
                    b.HasBaseType("InheritanceInEFCoreTest.Domain.Transaction");

                    b.Property<int>("InvoiceNumber")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("PayedAt")
                        .HasColumnType("datetime2");

                    b.ToTable("Invoices", (string)null);
                });

            modelBuilder.Entity("InheritanceInEFCoreTest.Domain.Transaction", b =>
                {
                    b.HasOne("InheritanceInEFCoreTest.Domain.Account", "FromAccount")
                        .WithMany("OutTransaction")
                        .HasForeignKey("FromAccountId");

                    b.HasOne("InheritanceInEFCoreTest.Domain.Account", "ToAccount")
                        .WithMany("InTransaction")
                        .HasForeignKey("ToAccountId");

                    b.Navigation("FromAccount");

                    b.Navigation("ToAccount");
                });

            modelBuilder.Entity("InheritanceInEFCoreTest.Domain.Expenses", b =>
                {
                    b.HasOne("InheritanceInEFCoreTest.Domain.Transaction", null)
                        .WithOne()
                        .HasForeignKey("InheritanceInEFCoreTest.Domain.Expenses", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InheritanceInEFCoreTest.Domain.Invoice", b =>
                {
                    b.HasOne("InheritanceInEFCoreTest.Domain.Transaction", null)
                        .WithOne()
                        .HasForeignKey("InheritanceInEFCoreTest.Domain.Invoice", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InheritanceInEFCoreTest.Domain.Account", b =>
                {
                    b.Navigation("InTransaction");

                    b.Navigation("OutTransaction");
                });
#pragma warning restore 612, 618
        }
    }
}
